{"version":3,"sources":["MostrarPalabra.js","MyApp.js","index.js"],"names":["MostrarPalabra","texto","irf","useState","palabra","setPalabra","texto_array","split","doInterval","shift","useEffect","interval","setInterval","clearInterval","MyApp","control_button","button_variant","button_value","state","setState","textareaRef","useRef","useLayoutEffect","current","style","height","textareaHeight","scrollHeight","className","Container","Row","Col","xl","span","offset","Card","Body","Title","InputGroup","Prepend","Text","FormControl","ref","id","value","onChange","e","target","as","type","size","min","max","placeholder","Button","variant","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAEaA,EAAiB,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAAU,EAClBC,mBAAS,IADS,mBACzCC,EADyC,KAChCC,EADgC,KAE5CC,EAAcL,EAAMM,MAAM,KAExBC,EAAa,WACjBH,EAAWC,EAAYG,UAUzB,OAPAC,qBAAU,WACR,IAAMC,EAAWC,YAAaJ,EAAYN,GAC1C,OAAO,WACLW,cAAcF,MAEf,IAGD,6BAAKP,KCPIU,EAAQ,WAAO,IAAD,EACCX,mBAAS,CACjCF,MAAO,mXACPC,IAAK,IACLa,gBAAgB,EAChBC,eAAgB,kBAChBC,aAAc,YANS,mBAClBC,EADkB,KACXC,EADW,KASjBlB,EAA6DiB,EAA7DjB,MAAOC,EAAsDgB,EAAtDhB,IAAKa,EAAiDG,EAAjDH,eAAgBC,EAAiCE,EAAjCF,eAAgBC,EAAiBC,EAAjBD,aAC9CG,EAAcC,mBAGpBC,2BAAgB,WACdF,EAAYG,QAAQC,MAAMC,OAAS,OACnC,IAAMC,EAAiBN,EAAYG,QAAQI,aAC3CP,EAAYG,QAAQC,MAAMC,OAASC,EAAiB,IAAMA,EAAiB,KAAO,UACjF,CAACzB,IAsCJ,OACE,qBAAK2B,UAAU,MAAf,SACE,cAACC,EAAA,EAAD,CAAWD,UAAU,oBAArB,SACE,cAACE,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GAA5B,UACE,cAACC,EAAA,EAAD,UACE,eAACA,EAAA,EAAKC,KAAN,WACE,cAACD,EAAA,EAAKE,MAAN,CAAYT,UAAU,uCAAtB,2CACA,eAACU,EAAA,EAAD,WACE,cAACA,EAAA,EAAWC,QAAZ,UACE,cAACD,EAAA,EAAWE,KAAZ,CAAiBZ,UAAU,6BAA3B,qBAEF,cAACa,EAAA,EAAD,CAAaC,IAAKtB,EAAauB,GAAG,aAAaC,MAAO3C,EAAO4C,SArCxD,SAACC,GACtB3B,EAAS,2BACFD,GADC,IAEJjB,MAAO6C,EAAEC,OAAOH,UAkCiFI,GAAG,gBAE1F,eAACV,EAAA,EAAD,WACE,cAACA,EAAA,EAAWC,QAAZ,UACE,cAACD,EAAA,EAAWE,KAAZ,CAAiBZ,UAAU,6BAA3B,mCAEF,cAACa,EAAA,EAAD,CAAaQ,KAAK,SAASD,GAAG,QAAQE,KAAK,KAAKC,IAAI,KAAKC,IAAI,MAAMC,YAAY,KAAKV,GAAG,qBAAqBE,SArDvG,SAACC,GACtB,IAEI5C,EAAO,GAFD4C,EAAEC,OAAOH,MACH,IACM,IACtBzB,EAAS,2BACFD,GADC,IAEJhB,IAAKA,QAgDO,cAACoD,EAAA,EAAD,CAAQC,QAASvC,EAAgBkC,KAAK,MAAMM,QArCzC,WASlBrC,EARIJ,EAQK,2BACDG,GADA,IAEPH,gBAAgB,EAChBC,eAAgB,kBAChBC,aAAc,YAXN,2BACDC,GADA,IAEPH,gBAAgB,EAChBC,eAAgB,iBAChBC,aAAc,WA+BA,SAAmEA,YAIzE,cAACkB,EAAA,EAAD,UACE,cAACA,EAAA,EAAKC,KAAN,CAAWR,UAAU,yBAArB,SACIb,GAAkB,cAAC,EAAD,CAAgBd,MAAOA,EAAOC,IAAKA,kBCnFvEuD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b4e2c92d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\nexport const MostrarPalabra = ({ texto, irf }) => {\r\n  const [palabra, setPalabra] = useState('');\r\n  let texto_array = texto.split(\" \");\r\n  \r\n  const doInterval = () => {\r\n    setPalabra(texto_array.shift());\r\n  }\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval( doInterval, irf)\r\n    return () => {\r\n      clearInterval(interval)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <h1>{palabra}</h1>\r\n  )\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { MostrarPalabra } from './MostrarPalabra';\r\nimport { useLayoutEffect } from 'react';\r\n\r\nexport const MyApp = () => {\r\n  const [state, setState] = useState({\r\n    texto: \"La criptografía es el desarrollo de un conjunto de técnicas que permiten alterar y modificar mensajes o archivos con el objetivo de que no puedan ser leídos por todos aquellos usuarios que no estén autorizados a hacerlo. Hoy en día, en pleno auge de las comunicaciones digitales, funciona como la base para cualquier proceso de seguridad informática.\",\r\n    irf: 1000,   // Intervalo de Repetición de función.\r\n    control_button: false,\r\n    button_variant: 'outline-success',\r\n    button_value: 'Iniciar'\r\n  })\r\n\r\n  const { texto, irf, control_button, button_variant, button_value } = state;\r\n  const textareaRef = useRef();\r\n\r\n  // mide el textarea del texto y le da una altura según la cantidad de líneas de texto que tenga\r\n  useLayoutEffect(() => {\r\n    textareaRef.current.style.height = \"auto\";\r\n    const textareaHeight = textareaRef.current.scrollHeight;\r\n    textareaRef.current.style.height = textareaHeight < 300 ? textareaHeight + \"px\" : \"300px\";\r\n  }, [texto])\r\n\r\n  // calcula el intervalo de repetición que se le pasa al setInterval que muestra las palabras\r\n\tconst irfCalculator = (e) => {\r\n\t\tlet ppm = e.target.value; // palabras por minuto.\r\n\t\tlet pps = ppm / 60; // palabras por segundo.\r\n\t\tlet irf = (1 / pps) * 1000;\r\n\t\tsetState({\r\n      ...state,\r\n      irf: irf\r\n    })\r\n\t};\r\n\r\n  const handleChange = (e) => {\r\n\t\tsetState({\r\n      ...state,\r\n      texto: e.target.value\r\n    });\r\n\t}\r\n\r\n\tconst handleClick = () => {\r\n\t\tif (!control_button) {\r\n\t\t\tsetState({\r\n        ...state,\r\n\t\t\t\tcontrol_button: true,\r\n\t\t\t\tbutton_variant: 'outline-danger',\r\n\t\t\t\tbutton_value: 'Stop',\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tsetState({\r\n        ...state,\r\n\t\t\t\tcontrol_button: false,\r\n\t\t\t\tbutton_variant: 'outline-success',\r\n\t\t\t\tbutton_value: 'Iniciar',\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\t\r\n  return (\r\n    <div className=\"App\">\r\n      <Container className='localstyle-mt-100'>\r\n        <Row>\r\n          <Col xl={{ span: 6, offset: 3 }}>\r\n            <Card>\r\n              <Card.Body>\r\n                <Card.Title className=\"localstyle-font-size-dos text-center\">Lector de palabras por minuto</Card.Title>\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text className=\"localstyle-font-size-uno25\">Texto</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <FormControl ref={textareaRef} id=\"text_input\" value={texto} onChange={handleChange} as=\"textarea\" />\r\n                </InputGroup>\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text className=\"localstyle-font-size-uno25\">Palabras por Minuto</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <FormControl type=\"number\" as=\"input\" size=\"lg\" min=\"60\" max=\"500\" placeholder=\"60\" id=\"words_minute_input\" onChange={irfCalculator} />\r\n                  <Button variant={button_variant} size=\"xxl\" onClick={handleClick}>{button_value}</Button>\r\n                </InputGroup>\r\n              </Card.Body>\r\n            </Card>\r\n            <Card>\r\n              <Card.Body className=\"localstyle-text-center\">\r\n                { control_button && <MostrarPalabra texto={texto} irf={irf}/> }\r\n              </Card.Body>\r\n            </Card>\r\n\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { MyApp } from './MyApp';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MyApp />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}